Plan: Implementing an HTML Export FeatureOverall Goal: To create a new feature in the "Open Jobs Status Tracker" application that allows users to export selected report content (formatted text and charts) as a single HTML file.Core Idea:Introduce a new "Export" tab in the application.This tab will provide UI controls for the user to select which parts of the report they want to export (e.g., overall summary, specific coordinator details, charts).When the user initiates an export, the application will:a.  Extract the relevant text data and its formatting tags from the ReportingTab.b.  Save the selected charts from the ReportingTab as image files (e.g., PNG).c.  Programmatically generate an HTML string.d.  This HTML will include the extracted text, with formatting applied via CSS (derived from the Tkinter tags).e.  The HTML will also embed the saved chart images.f.  Finally, the user will be prompted to save this HTML string to a .html file.Phase 1: Setting up the ExportTabCreate export_tab.py File:Create a new Python file named export_tab.py in your project directory.This file will contain the ExportTab class.Define ExportTab Class:Inside export_tab.py, define a class ExportTab that inherits from tkinter.ttk.Frame.The __init__ method should take parent_notebook and app_instance as arguments (similar to DataManagementTab and ReportingTab).Store app_instance as self.app.Basic UI for ExportTab:In ExportTab._setup_ui():Add a main title label (e.g., "Export Report to HTML").Add an "Export to HTML" ttk.Button. Initially, its command can be a placeholder.Basic layout for these elements.Integrate ExportTab into app_shell.py:Open app_shell.py.Import ExportTab: from export_tab import ExportTab.In OpenJobsApp.__init__, initialize self.export_tab_instance = None.In OpenJobsApp.create_main_ui_layout():Instantiate ExportTab: self.export_tab_instance = ExportTab(self.notebook, self).Add it to the notebook: self.notebook.add(self.export_tab_instance, text='Export Report').Phase 2: Adding UI Controls to ExportTabContent Selection Controls (in ExportTab._setup_ui()):Add tkinter.BooleanVar instances for each selectable option.Overall Health: ttk.Checkbutton for "Include Overall Pipeline Health".Coordinator Details:Option 1 (Simple): ttk.Checkbutton for "Include All Project Coordinator Details".Option 2 (Advanced, for later): A tkinter.Listbox with MULTIPLE selection mode, populated with coordinator names from self.app.reporting_tab_instance (if data is loaded).Charts: ttk.Checkbutton for "Include Charts".(Optional) Date Range: If filtering by date is desired for the export, add ttk.Entry fields or date picker widgets for "Start Date" and "End Date".Phase 3: Data and Chart Extraction Logic (Modifying ReportingTab)Modify reporting_tab.py:Method to Get Formatted Text:Add a new public method, e.g., get_formatted_text_content(self, section_key="overall").section_key can be "overall" for the main summary, or a project coordinator's name (the safe version used as a key in self.coordinator_tabs_widgets).This method should access the appropriate tk.Text widget (self.overall_stats_text_area or self.coordinator_tabs_widgets[section_key]).Use text_widget.dump("1.0", tk.END, tag=True, text=True) to get a list of (value, key, index) tuples.Process this dump to return a list of (text_segment, list_of_applied_tkinter_tags) tuples. This will be crucial for HTML conversion.Handle cases where the text widget might not exist or be empty.Method to Save Charts as Images:Add a new public method, e.g., save_chart_as_image(self, chart_key, output_image_path).chart_key could be "overall_status_chart" or "overall_financial_summary_chart".This method should access the Matplotlib Figure object associated with the chart (e.g., self.overall_status_chart_canvas_widget.figure).Use figure.savefig(output_image_path, dpi=100, bbox_inches='tight').Return True on success, False on failure (e.g., chart not generated yet).Ensure the figure exists before attempting to save.Phase 4: HTML Generation Logic (in ExportTab)Create _generate_html_content(self) method in ExportTab:This method will be the core of HTML generation.Initialize an empty list, html_parts = [], to build the HTML string.Start HTML Structure:html_parts.append("<!DOCTYPE html><html><head><meta charset='UTF-8'><title>Job Report</title>")CSS Styling:html_parts.append("<style>")Define CSS rules. Iterate through config.STATUS_COLORS and other font/color settings from config.py to create corresponding CSS.Map Tkinter tags (from ReportingTab._configure_tags_for_text_widget) to CSS classes:e.g., header -> .report-header { font-family: ...; font-size: ...; font-weight: bold; ... }subheader -> .report-subheader { ... }indented_item -> .report-indented { margin-left: 20px; } (or based on lmargin1 values)bold_metric -> .report-bold-metric { font-weight: bold; }html_parts.append("</style></head><body>")Access ReportingTab Instance:reporting_tab = self.app.reporting_tab_instanceCheck if reporting_tab exists and if data is loaded.Process Selected Text Sections:If "Include Overall Pipeline Health" is checked:text_data = reporting_tab.get_formatted_text_content("overall")Iterate text_data: For each (text_segment, tags_list), convert to HTML (e.g., <p class="tag1 tag2">{text_segment}</p>). Handle newlines (\n) by converting them to <br> or wrapping segments in <p>.Append generated HTML to html_parts.If "Include Project Coordinator Details" is checked:Get list of active coordinators (e.g., from reporting_tab.coordinator_tabs_widgets.keys()).For each coordinator:text_data = reporting_tab.get_formatted_text_content(coordinator_safe_name)Convert and append to html_parts. Add a heading for each coordinator.Process Selected Charts:Create a subdirectory for images (e.g., report_images) next to where the HTML will be saved, or use temporary image files. For simplicity, let's assume a subdirectory.If "Include Charts" is checked:chart_filename_status = "overall_status_chart.png"chart_path_status = os.path.join(image_dir_path, chart_filename_status)success = reporting_tab.save_chart_as_image("overall_status_chart", chart_path_status)If success, append <img src="report_images/{chart_filename_status}" alt="Overall Status Chart"><br> to html_parts.Repeat for overall_financial_summary_chart.End HTML Structure:html_parts.append("</body></html>")Return "".join(html_parts) and the path to the image directory (if created).Helper for Tkinter Tag to HTML Conversion:Create a private method in ExportTab, e.g., _convert_tkinter_text_to_html(self, text_segments_with_tags). This will encapsulate the logic of turning the list of (text_segment, tags_list) into an HTML string with appropriate classes.Phase 5: File Saving and User Interaction (in ExportTab)Implement "Export to HTML" Button Command:Create a method, e.g., _do_export_html(self).Get Save Location:Use filedialog.asksaveasfilename from tkinter to let the user choose where to save the .html file (default extension .html).If the user cancels, abort.Prepare Image Directory:If charts are included, determine the image directory path (e.g., a folder named [html_filename]_images in the same location as the HTML file).Create this directory using os.makedirs(..., exist_ok=True).Generate HTML:Call html_content, image_dir_actual_path = self._generate_html_content(image_dir_intended_path).Write HTML to File:Open the chosen HTML file path in write mode ('w', encoding 'utf-8').Write html_content to it.Feedback:Show a messagebox.showinfo("Success", "Report exported successfully to HTML.").Or messagebox.showerror("Error", "Failed to export report.") if issues arise.Clean up (Optional): If using temporary image files not in a subdirectory, delete them.Phase 6: Refinements, Error Handling, and TestingError Handling:Check if self.app.reporting_tab_instance exists and has data before attempting to extract.Handle FileNotFoundError or other exceptions during file/directory operations.Gracefully handle cases where charts might not have been generated yet in ReportingTab.Image Paths:Ensure the src attribute in <img> tags correctly points to the image files relative to the saved HTML file.CSS Details:Fine-tune the CSS in the HTML <style> block to closely match the application's appearance.Test font rendering and colors.Testing:Test with various combinations of selected content.Test with no data loaded in the application.Open the generated HTML file in different web browsers to check compatibility and appearance.Verify that printing the HTML from a browser (especially to PDF) yields acceptable results.Code Structure:Keep methods in ExportTab focused on their specific tasks (UI, HTML generation, file I/O).Ensure ReportingTab's new methods are clean and only responsible for providing data/images, not HTML generation.This detailed plan should provide a good roadmap. Each phase builds upon the previous one.